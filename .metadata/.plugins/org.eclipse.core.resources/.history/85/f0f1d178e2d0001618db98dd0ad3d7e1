package br.com.caelum.jdbc.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import br.com.caelum.jdbc.ConnectionFactory;
import br.com.caelum.jdbc.modelo.Tarefa;

public class JdbcTarefaDao {

	// a conexão com o banco de dados
	private Connection connection;
	
	public JdbcTarefaDao() {
		this.connection = new ConnectionFactory().getConnection();
	}
	
	public JdbcTarefaDao(Connection connection) {
		this.connection = connection;
	}
	
	public void adiciona(Tarefa tarefa) {
		String sql = "insert into tarefas " +
		"(descricao,finalizado,datafinalizacao)" +
		" values (?,?,?)";

		try {
			// prepared statement para inserção
			PreparedStatement stmt = connection.prepareStatement(sql);
	
			// seta os valores																									
			stmt.setString(1, tarefa.getDescricao());              																									        
			stmt.setBoolean(2, tarefa.getFinalizado());             																									         
			
			stmt.setObject(3, tarefa.getDataFinalizacao());  																									                    
		                      
			//executa
			stmt.execute();
			stmt.close();
		  } catch (SQLException e) {
		  	throw new RuntimeException(e);
		  }
	}
	
	private Tarefa recupera(ResultSet rs, Tarefa tarefa) {
		try {
			tarefa.setId(rs.getLong("id"));
			tarefa.setNome(rs.getString("nome"));
			tarefa.setEmail(rs.getString("email"));
			tarefa.setEndereco(rs.getString("endereco"));
			
			// montando a data através do Calendar
			LocalDate data = rs.getObject("datanascimento", LocalDate.class); 
			tarefa.setDataNascimento(data);
			
			return tarefa;
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}				
	}
	
	public Tarefa consulta(Long id) {
		try {
			PreparedStatement stmt = this.connection.
			prepareStatement("select * from contatos" +
			" where id=?");			
			
			try {
				stmt.setLong(1, id);
				ResultSet rs = stmt.executeQuery();
				
				rs.next();

				Tarefa tarefa = new Tarefa();
				tarefa = recupera(rs, tarefa);
				
				rs.close();
				stmt.close();
				
				return tarefa;
			} catch (SQLException e) {
				throw new RuntimeException(e);
			}			
			
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}	
	
	public List<Tarefa> getLista() {
		try {
			List<Tarefa> tarefas = new ArrayList<Tarefa>();
			PreparedStatement stmt = this.connection.prepareStatement("select * from contatos");
			ResultSet rs = stmt.executeQuery();
			
			while (rs.next()) {
				// criando o objeto Contato
				Tarefa tarefa = new Tarefa();
				tarefa = recupera(rs, tarefa);
				
				// adicionando o objeto à lista
				tarefas.add(tarefa);
			}
			rs.close();
			stmt.close();
			return tarefas;
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}	
	
	public void altera(Tarefa tarefa) {
		String sql = "update contatos set nome=?, email=?, endereco=?," +
		"dataNascimento=? where id=?";
		try {
			PreparedStatement stmt = connection.prepareStatement(sql);
			stmt.setString(1, tarefa.getNome());
			stmt.setString(2, tarefa.getEmail());
			stmt.setString(3, tarefa.getEndereco());
			stmt.setObject(4, tarefa.getDataNascimento());
			stmt.setLong(5, tarefa.getId());
			stmt.execute();
			stmt.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}
	
	public void remove(Tarefa tarefa) {
		try {
			PreparedStatement stmt = connection.prepareStatement("delete" +
			" from contatos where id=?");
			stmt.setLong(1, tarefa.getId());
			stmt.execute();
			stmt.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
	}
}
